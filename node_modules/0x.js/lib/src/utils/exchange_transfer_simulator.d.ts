/// <reference types="bignumber.js" />
import { TradeSide, TransferType } from '../types';
import { TokenWrapper } from '../contract_wrappers/token_wrapper';
/**
 * Copy on read store for balances/proxyAllowances of tokens/accounts touched in trades
 */
export declare class BalanceAndProxyAllowanceLazyStore {
    protected _token: TokenWrapper;
    private _balance;
    private _proxyAllowance;
    constructor(token: TokenWrapper);
    protected getBalanceAsync(tokenAddress: string, userAddress: string): Promise<BigNumber.BigNumber>;
    protected setBalance(tokenAddress: string, userAddress: string, balance: BigNumber.BigNumber): void;
    protected getProxyAllowanceAsync(tokenAddress: string, userAddress: string): Promise<BigNumber.BigNumber>;
    protected setProxyAllowance(tokenAddress: string, userAddress: string, proxyAllowance: BigNumber.BigNumber): void;
}
export declare class ExchangeTransferSimulator extends BalanceAndProxyAllowanceLazyStore {
    /**
     * Simulates transferFrom call performed by a proxy
     * @param  tokenAddress      Address of the token to be transferred
     * @param  from              Owner of the transferred tokens
     * @param  to                Recipient of the transferred tokens
     * @param  amountInBaseUnits The amount of tokens being transferred
     * @param  tradeSide         Is Maker/Taker transferring
     * @param  transferType      Is it a fee payment or a value transfer
     */
    transferFromAsync(tokenAddress: string, from: string, to: string, amountInBaseUnits: BigNumber.BigNumber, tradeSide: TradeSide, transferType: TransferType): Promise<void>;
    private decreaseProxyAllowanceAsync(tokenAddress, userAddress, amountInBaseUnits);
    private increaseBalanceAsync(tokenAddress, userAddress, amountInBaseUnits);
    private decreaseBalanceAsync(tokenAddress, userAddress, amountInBaseUnits);
    private throwValidationError(failureReason, tradeSide, transferType);
}
