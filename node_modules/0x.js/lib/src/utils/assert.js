"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var Web3 = require("web3");
var _0x_json_schemas_1 = require("0x-json-schemas");
var HEX_REGEX = /^0x[0-9A-F]*$/i;
exports.assert = {
    isBigNumber: function (variableName, value) {
        var isBigNumber = _.isObject(value) && value.isBigNumber;
        this.assert(isBigNumber, this.typeAssertionMessage(variableName, 'BigNumber', value));
    },
    isUndefined: function (value, variableName) {
        this.assert(_.isUndefined(value), this.typeAssertionMessage(variableName, 'undefined', value));
    },
    isString: function (variableName, value) {
        this.assert(_.isString(value), this.typeAssertionMessage(variableName, 'string', value));
    },
    isFunction: function (variableName, value) {
        this.assert(_.isFunction(value), this.typeAssertionMessage(variableName, 'function', value));
    },
    isHexString: function (variableName, value) {
        this.assert(_.isString(value) && HEX_REGEX.test(value), this.typeAssertionMessage(variableName, 'HexString', value));
    },
    isETHAddressHex: function (variableName, value) {
        var web3 = new Web3();
        this.assert(web3.isAddress(value), this.typeAssertionMessage(variableName, 'ETHAddressHex', value));
        this.assert(web3.isAddress(value) && value.toLowerCase() === value, "Checksummed addresses are not supported. Convert " + variableName + " to lower case before passing");
    },
    doesBelongToStringEnum: function (variableName, value, stringEnum /* There is no base type for every string enum */) {
        var doesBelongToStringEnum = !_.isUndefined(stringEnum[value]);
        var enumValues = _.keys(stringEnum);
        var enumValuesAsStrings = _.map(enumValues, function (enumValue) { return "'" + enumValue + "'"; });
        var enumValuesAsString = enumValuesAsStrings.join(', ');
        exports.assert.assert(doesBelongToStringEnum, "Expected " + variableName + " to be one of: " + enumValuesAsString + ", encountered: " + value);
    },
    isSenderAddressAsync: function (variableName, senderAddressHex, web3Wrapper) {
        return __awaiter(this, void 0, void 0, function () {
            var isSenderAddressAvailable;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        exports.assert.isETHAddressHex(variableName, senderAddressHex);
                        return [4 /*yield*/, web3Wrapper.isSenderAddressAvailableAsync(senderAddressHex)];
                    case 1:
                        isSenderAddressAvailable = _a.sent();
                        exports.assert.assert(isSenderAddressAvailable, "Specified " + variableName + " " + senderAddressHex + " isn't available through the supplied web3 provider");
                        return [2 /*return*/];
                }
            });
        });
    },
    isUserAddressAvailableAsync: function (web3Wrapper) {
        return __awaiter(this, void 0, void 0, function () {
            var availableAddresses;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Wrapper.getAvailableAddressesAsync()];
                    case 1:
                        availableAddresses = _a.sent();
                        this.assert(!_.isEmpty(availableAddresses), 'No addresses were available on the provided web3 provider');
                        return [2 /*return*/];
                }
            });
        });
    },
    hasAtMostOneUniqueValue: function (value, errMsg) {
        this.assert(_.uniq(value).length <= 1, errMsg);
    },
    isNumber: function (variableName, value) {
        this.assert(_.isFinite(value), this.typeAssertionMessage(variableName, 'number', value));
    },
    isBoolean: function (variableName, value) {
        this.assert(_.isBoolean(value), this.typeAssertionMessage(variableName, 'boolean', value));
    },
    isWeb3Provider: function (variableName, value) {
        var isWeb3Provider = _.isFunction(value.send) || _.isFunction(value.sendAsync);
        this.assert(isWeb3Provider, this.typeAssertionMessage(variableName, 'Web3.Provider', value));
    },
    doesConformToSchema: function (variableName, value, schema) {
        var schemaValidator = new _0x_json_schemas_1.SchemaValidator();
        var validationResult = schemaValidator.validate(value, schema);
        var hasValidationErrors = validationResult.errors.length > 0;
        var msg = "Expected " + variableName + " to conform to schema " + schema.id + "\nEncountered: " + JSON.stringify(value, null, '\t') + "\nValidation errors: " + validationResult.errors.join(', ');
        this.assert(!hasValidationErrors, msg);
    },
    assert: function (condition, message) {
        if (!condition) {
            throw new Error(message);
        }
    },
    typeAssertionMessage: function (variableName, type, value) {
        return "Expected " + variableName + " to be of type " + type + ", encountered: " + value;
    },
};
//# sourceMappingURL=assert.js.map