import * as Web3 from 'web3';
import { Web3Wrapper } from '../web3_wrapper';
import { AbiDecoder } from '../utils/abi_decoder';
import { Artifact, LogWithDecodedArgs, RawLog, ContractEvents, SubscriptionOpts, IndexedFilterValues } from '../types';
export declare class ContractWrapper {
    protected _web3Wrapper: Web3Wrapper;
    private _abiDecoder?;
    constructor(web3Wrapper: Web3Wrapper, abiDecoder?: AbiDecoder);
    protected _getLogsAsync(address: string, eventName: ContractEvents, subscriptionOpts: SubscriptionOpts, indexFilterValues: IndexedFilterValues, abi: Web3.ContractAbi): Promise<LogWithDecodedArgs[]>;
    protected _tryToDecodeLogOrNoop(log: Web3.LogEntry): LogWithDecodedArgs | RawLog;
    protected _instantiateContractIfExistsAsync<A extends Web3.ContractInstance>(artifact: Artifact, addressIfExists?: string): Promise<A>;
    protected _getEventSignatureFromAbiByName(eventAbi: Web3.EventAbi, eventName: ContractEvents): string;
    private _getTopicsForIndexedArgs(abi, indexFilterValues);
}
