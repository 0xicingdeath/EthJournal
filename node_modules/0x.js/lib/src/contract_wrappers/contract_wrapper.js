"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var ethUtil = require("ethereumjs-util");
var types_1 = require("../types");
var TOPIC_LENGTH = 32;
var ContractWrapper = (function () {
    function ContractWrapper(web3Wrapper, abiDecoder) {
        this._web3Wrapper = web3Wrapper;
        this._abiDecoder = abiDecoder;
    }
    ContractWrapper.prototype._getLogsAsync = function (address, eventName, subscriptionOpts, indexFilterValues, abi) {
        return __awaiter(this, void 0, void 0, function () {
            var eventAbi, eventSignature, topicForEventSignature, topicsForIndexedArgs, topics, filter, logs, logsWithDecodedArguments;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eventAbi = _.find(abi, { name: eventName });
                        eventSignature = this._getEventSignatureFromAbiByName(eventAbi, eventName);
                        topicForEventSignature = this._web3Wrapper.keccak256(eventSignature);
                        topicsForIndexedArgs = this._getTopicsForIndexedArgs(eventAbi, indexFilterValues);
                        topics = [topicForEventSignature].concat(topicsForIndexedArgs);
                        filter = {
                            fromBlock: subscriptionOpts.fromBlock,
                            toBlock: subscriptionOpts.toBlock,
                            address: address,
                            topics: topics,
                        };
                        return [4 /*yield*/, this._web3Wrapper.getLogsAsync(filter)];
                    case 1:
                        logs = _a.sent();
                        logsWithDecodedArguments = _.map(logs, this._tryToDecodeLogOrNoop.bind(this));
                        return [2 /*return*/, logsWithDecodedArguments];
                }
            });
        });
    };
    ContractWrapper.prototype._tryToDecodeLogOrNoop = function (log) {
        if (_.isUndefined(this._abiDecoder)) {
            throw new Error(types_1.InternalZeroExError.NoAbiDecoder);
        }
        var logWithDecodedArgs = this._abiDecoder.tryToDecodeLogOrNoop(log);
        return logWithDecodedArgs;
    };
    ContractWrapper.prototype._instantiateContractIfExistsAsync = function (artifact, addressIfExists) {
        return __awaiter(this, void 0, void 0, function () {
            var contractInstance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._web3Wrapper.getContractInstanceFromArtifactAsync(artifact, addressIfExists)];
                    case 1:
                        contractInstance = _a.sent();
                        return [2 /*return*/, contractInstance];
                }
            });
        });
    };
    ContractWrapper.prototype._getEventSignatureFromAbiByName = function (eventAbi, eventName) {
        var types = _.map(eventAbi.inputs, 'type');
        var signature = eventAbi.name + "(" + types.join(',') + ")";
        return signature;
    };
    ContractWrapper.prototype._getTopicsForIndexedArgs = function (abi, indexFilterValues) {
        var topics = [];
        for (var _i = 0, _a = abi.inputs; _i < _a.length; _i++) {
            var eventInput = _a[_i];
            if (!eventInput.indexed) {
                continue;
            }
            if (_.isUndefined(indexFilterValues[eventInput.name])) {
                topics.push(null);
            }
            else {
                var value = indexFilterValues[eventInput.name];
                var buffer = ethUtil.toBuffer(value);
                var paddedBuffer = ethUtil.setLengthLeft(buffer, TOPIC_LENGTH);
                var topic = ethUtil.bufferToHex(paddedBuffer);
                topics.push(topic);
            }
        }
        return topics;
    };
    return ContractWrapper;
}());
exports.ContractWrapper = ContractWrapper;
//# sourceMappingURL=contract_wrapper.js.map