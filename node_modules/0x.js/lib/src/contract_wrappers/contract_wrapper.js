"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var ethereumjs_blockstream_1 = require("ethereumjs-blockstream");
var types_1 = require("../types");
var constants_1 = require("../utils/constants");
var interval_utils_1 = require("../utils/interval_utils");
var filter_utils_1 = require("../utils/filter_utils");
var ContractWrapper = (function () {
    function ContractWrapper(web3Wrapper, abiDecoder) {
        this._web3Wrapper = web3Wrapper;
        this._abiDecoder = abiDecoder;
        this._filters = {};
        this._filterCallbacks = {};
        this._blockAndLogStreamer = undefined;
        this._onLogAddedSubscriptionToken = undefined;
        this._onLogRemovedSubscriptionToken = undefined;
    }
    ContractWrapper.prototype._subscribe = function (address, eventName, indexFilterValues, abi, callback) {
        var filter = filter_utils_1.filterUtils.getFilter(address, eventName, indexFilterValues, abi);
        if (_.isUndefined(this._blockAndLogStreamer)) {
            this._startBlockAndLogStream();
        }
        var filterToken = filter_utils_1.filterUtils.generateUUID();
        this._filters[filterToken] = filter;
        this._filterCallbacks[filterToken] = callback;
        return filterToken;
    };
    ContractWrapper.prototype._unsubscribe = function (filterToken) {
        if (_.isUndefined(this._filters[filterToken])) {
            throw new Error(types_1.ZeroExError.SubscriptionNotFound);
        }
        delete this._filters[filterToken];
        delete this._filterCallbacks[filterToken];
        if (_.isEmpty(this._filters)) {
            this._stopBlockAndLogStream();
        }
    };
    ContractWrapper.prototype._getLogsAsync = function (address, eventName, subscriptionOpts, indexFilterValues, abi) {
        return __awaiter(this, void 0, void 0, function () {
            var filter, logs, logsWithDecodedArguments;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filter = filter_utils_1.filterUtils.getFilter(address, eventName, indexFilterValues, abi, subscriptionOpts);
                        return [4 /*yield*/, this._web3Wrapper.getLogsAsync(filter)];
                    case 1:
                        logs = _a.sent();
                        logsWithDecodedArguments = _.map(logs, this._tryToDecodeLogOrNoop.bind(this));
                        return [2 /*return*/, logsWithDecodedArguments];
                }
            });
        });
    };
    ContractWrapper.prototype._tryToDecodeLogOrNoop = function (log) {
        if (_.isUndefined(this._abiDecoder)) {
            throw new Error(types_1.InternalZeroExError.NoAbiDecoder);
        }
        var logWithDecodedArgs = this._abiDecoder.tryToDecodeLogOrNoop(log);
        return logWithDecodedArgs;
    };
    ContractWrapper.prototype._instantiateContractIfExistsAsync = function (artifact, addressIfExists) {
        return __awaiter(this, void 0, void 0, function () {
            var contractInstance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._web3Wrapper.getContractInstanceFromArtifactAsync(artifact, addressIfExists)];
                    case 1:
                        contractInstance = _a.sent();
                        return [2 /*return*/, contractInstance];
                }
            });
        });
    };
    ContractWrapper.prototype._onLogStateChanged = function (removed, log) {
        var _this = this;
        _.forEach(this._filters, function (filter, filterToken) {
            if (filter_utils_1.filterUtils.matchesFilter(log, filter)) {
                var decodedLog = _this._tryToDecodeLogOrNoop(log);
                var logEvent = __assign({}, decodedLog, { removed: removed });
                _this._filterCallbacks[filterToken](logEvent);
            }
        });
    };
    ContractWrapper.prototype._startBlockAndLogStream = function () {
        this._blockAndLogStreamer = new ethereumjs_blockstream_1.BlockAndLogStreamer(this._web3Wrapper.getBlockAsync.bind(this._web3Wrapper), this._web3Wrapper.getLogsAsync.bind(this._web3Wrapper));
        var catchAllLogFilter = {};
        this._blockAndLogStreamer.addLogFilter(catchAllLogFilter);
        this._blockAndLogStreamInterval = interval_utils_1.intervalUtils.setAsyncExcludingInterval(this._reconcileBlockAsync.bind(this), constants_1.constants.DEFAULT_BLOCK_POLLING_INTERVAL);
        var removed = false;
        this._onLogAddedSubscriptionToken = this._blockAndLogStreamer.subscribeToOnLogAdded(this._onLogStateChanged.bind(this, removed));
        removed = true;
        this._onLogRemovedSubscriptionToken = this._blockAndLogStreamer.subscribeToOnLogRemoved(this._onLogStateChanged.bind(this, removed));
    };
    ContractWrapper.prototype._stopBlockAndLogStream = function () {
        this._blockAndLogStreamer.unsubscribeFromOnLogAdded(this._onLogAddedSubscriptionToken);
        this._blockAndLogStreamer.unsubscribeFromOnLogRemoved(this._onLogRemovedSubscriptionToken);
        interval_utils_1.intervalUtils.clearAsyncExcludingInterval(this._blockAndLogStreamInterval);
        delete this._blockAndLogStreamer;
    };
    ContractWrapper.prototype._reconcileBlockAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var latestBlock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._web3Wrapper.getBlockAsync(types_1.BlockParamLiteral.Latest)];
                    case 1:
                        latestBlock = _a.sent();
                        // We need to coerce to Block type cause Web3.Block includes types for mempool blocks
                        if (!_.isUndefined(this._blockAndLogStreamer)) {
                            // If we clear the interval while fetching the block - this._blockAndLogStreamer will be undefined
                            this._blockAndLogStreamer.reconcileNewBlock(latestBlock);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return ContractWrapper;
}());
exports.ContractWrapper = ContractWrapper;
//# sourceMappingURL=contract_wrapper.js.map